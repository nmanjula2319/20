To see the output in PL/SQL we need to use below command.
ex:
	SQL> set   serveroutput  on 


Control Statements
==================

1) IF THEN 
----------
It will evaluate the code only if our condition is true.

ex:
	DECLARE
	A number:=5000;
	BEGIN

	IF A>2000 THEN 
	DBMS_OUTPUT.PUT_LINE('It is Greatest');
	END IF;

	END;
	/

ex:
---
	DECLARE
	A number:=2000;
	BEGIN

	IF A>5000 THEN 
	DBMS_OUTPUT.PUT_LINE('It is Greatest');
	END IF;

	END;
	/


2) IF THEN ELSE 
----------------
It will evalute the code either our condition is true or false.

ex:
---
	DECLARE 
	A number:=5000;
	BEGIN

	IF A>2000 THEN 
	DBMS_OUTPUT.PUT_LINE('It is greatest');
	ELSE
	DBMS_OUTPUT.PUT_LINE('It is least');
	END IF;

	END;
	/


ex:
---
	DECLARE 
	A number:=2000;
	BEGIN

	IF A>5000 THEN 
	DBMS_OUTPUT.PUT_LINE('It is greatest');
	ELSE
	DBMS_OUTPUT.PUT_LINE('It is least');
	END IF;

	END;
	/

3) IF THE ELSIF THEN 
---------------------
It will evalute the code based on multiple conditions.

ex:
	DECLARE 
	opt number;
	BEGIN
	opt:=&option;
	
	IF opt=100 THEN 
	DBMS_OUTPUT.PUT_LINE('It is police number');
	ELSIF opt=103 THEN 
	DBMS_OUTPUT.PUT_LINE('It is enquiry number');
	ELSIF opt=108 THEN 
	DBMS_OUTPUT.PUT_LINE('It is emergency number');
	ELSE 
	DBMS_OUTPUT.PUT_LINE('Invalid option');
	END IF;
	
	END;
	/


LOOPS
=======
We have three types of LOOPS in PL/SQL.

1) Simple LOOP

2) While LOOP

3) For LOOP


1) Simple LOOP
----------------
It will evaluate the code untill our condition is true.

ex:
---
	DECLARE 
	A number:=1;
	BEGIN
	DBMS_OUTPUT.PUT_LINE('Welcome');
	
	LOOP
	DBMS_OUTPUT.PUT_LINE('Hello');
	EXIT WHEN A=4;
	A:=A+1;
	END LOOP;

	DBMS_OUTPUT.PUT_LINE('Thank You');
	END;
	/


2) While LOOP
--------------
It will evaluate the code untill our condition is true.

ex:
	DECLARE 
	A number:=1;
	BEGIN
	DBMS_OUTPUT.PUT_LINE('Welcome');

	WHILE A<=4 LOOP
	DBMS_OUTPUT.PUT_LINE('Hello');
	A:=A+1;
	END LOOP;

	DBMS_OUTPUT.PUT_LINE('Thank You');
	END;
	/

3) For LOOP
-----------
It will evaluate the code untill our condition is true.

ex:
---
	DECLARE
	A number;
	BEGIN
	DBMS_OUTPUT.PUT_LINE('Welcome');

	FOR A IN 1 .. 4 LOOP
	DBMS_OUTPUT.PUT_LINE('Hello');
	END LOOP;

	DBMS_OUTPUT.PUT_LINE('Thank You');
	END;
	/


ex:
---
	DECLARE
	A number;
	BEGIN

	FOR A IN 1 .. 10 LOOP
	DBMS_OUTPUT.PUT_LINE(A);
	END LOOP;

	END;
	/


ex:
---
	DECLARE
	A number;
	N number:=5;
	BEGIN

	FOR A IN 1 .. 10 LOOP
	DBMS_OUTPUT.PUT_LINE(N||' * '||A||' = '||N*A);
	END LOOP;

	END;
	/


Exceptions 
===========
Runtime errors are called exceptions.

We have two types of exceptions in PL/SQL.

1) Predefined exceptions 

2) Userdefined exceptions 


1) Predefined exceptions
------------------------
Built-In exceptions are called predefined exceptions.

We have following list of predefined exceptions.

1) NO_DATA_FOUND exception 

2) TOO_MANY_ROWS exception 

3) ZERO_DIVIDE exception 

4) VALUE _ERROR exception 

5) DUP_VAL_ON_INDEX exception 

6) OTHERS 


1) NO_DATA_FOUND exception
-------------------------
This exception will occur when select statement does not return any row.

ex:
	DECLARE 
	L_Ename  emp.ename%TYPE;
	BEGIN
	select ename into L_Ename from emp where eid=209;
	DBMS_OUTPUT.PUT_LINE(L_Ename);
	EXCEPTION
	WHEN NO_DATA_FOUND THEN 
	DBMS_OUTPUT.PUT_LINE('Please check employee id ');
	END;
	/

2) TOO_MANY_ROWS exception 
----------------------------
This exception will occur when select statement returns more then one row.

ex:
	DECLARE 
	L_Ename  emp.ename%TYPE;
	BEGIN
	select ename into L_Ename from emp where deptno=10;
	DBMS_OUTPUT.PUT_LINE(L_Ename);
	EXCEPTION
	WHEN TOO_MANY_ROWS THEN 
	DBMS_OUTPUT.PUT_LINE('select statement returns multiple rows');
	END;
	/

3) ZERO_DIVIDE exception 
-----------------------
This exception will occur when we divide any number with zero.

ex:
	DECLARE 
	A number;
	BEGIN
	A:=10/0;
	DBMS_OUTPUT.PUT_LINE(A);
	EXCEPTION 
	WHEN ZERO_DIVIDE THEN 
	DBMS_OUTPUT.PUT_LINE('Dont divide by zero');
	END;
	/

4) VALUE _ERROR exception
-------------------------
This exception will occur when there is a mismatch with datatype or size.

ex:
	DECLARE 
	L_Esal  emp.esal%TYPE;
	BEGIN
	select ename into L_Esal from emp where eid=201;
	DBMS_OUTPUT.PUT_LINE(L_Esal);
	EXCEPTION
	WHEN VALUE_ERROR THEN 
	DBMS_OUTPUT.PUT_LINE('Please check datatype ');
	END;
	/

ex:
---
	DECLARE 
	A number(3);
	BEGIN
	A:=12345;
	DBMS_OUTPUT.PUT_LINE(A);
	EXCEPTION
	WHEN VALUE_ERROR THEN 
	DBMS_OUTPUT.PUT_LINE('Please check the size');
	END;
	/

5) DUP_VAL_ON_INDEX exception
-----------------------------
This exception will occur when we insert duplicate value in a primary key.

ex:
	alter table emp ADD primary key(eid);

	BEGIN
	insert into emp values(205,'Mark',70000,50,'Salesman',300);
	DBMS_OUTPUT.PUT_LINE('Record Inserted');
	EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
	DBMS_OUTPUT.PUT_LINE('Duplicate employee id not allowed');
	END;
	/

6) OTHERS 
-----------
IT is a univeral angular exception which handles all types of exceptions.

ex:
	DECLARE 
	L_Ename  emp.ename%TYPE;
	BEGIN
	select ename into L_Ename from emp where eid=209;
	DBMS_OUTPUT.PUT_LINE(L_Ename);
	EXCEPTION
	WHEN OTHERS THEN 
	DBMS_OUTPUT.PUT_LINE('Please check employee id ');
	END;
	/
	

2) Userdefined exceptions 
-------------------------
Exceptions which are created by the user are called custom/userdefined exceptions.


steps to develop userdefined exceptions
---------------------------------------
step1:
-----
	Declare the exception 
	ex:
		<exception_name> EXCEPTION;
step2:
-----
	Raise the exception 
	ex:
		RAISE <exception_name>;
step3:
------
	Handle the exception 
	ex:
		WHEN  <exception_name> THEN 

ex:
---
	DECLARE 
	L_Sal  number:=5000;
	MY_EX1 Exception;
	BEGIN
		
	IF L_Sal>2000 THEN 
	RAISE  MY_EX1;
	END IF;
	DBMS_OUTPUT.PUT_LINE(L_Sal);
	
	EXCEPTION
	WHEN MY_EX1 THEN 
	DBMS_OUTPUT.PUT_LINE('Salary is too high');
	END;
	/
	










































































































